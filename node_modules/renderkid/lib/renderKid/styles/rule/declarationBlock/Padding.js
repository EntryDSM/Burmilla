// Generated by CoffeeScript 2.5.1
var Padding, PaddingBottom, PaddingLeft, PaddingRight, PaddingTop, _Declaration;

_Declaration = require('./_Declaration');

PaddingTop = require('./PaddingTop');

PaddingLeft = require('./PaddingLeft');

PaddingRight = require('./PaddingRight');

PaddingBottom = require('./PaddingBottom');

module.exports = Padding = (function() {
  var self;

  class Padding extends _Declaration {
    static setOnto(declarations, prop, originalValue) {
      var append, val, vals;
      append = '';
      val = _Declaration.sanitizeValue(originalValue);
      if (_Declaration.importantClauseRx.test(String(val))) {
        append = ' !important';
        val = val.replace(_Declaration.importantClauseRx, '');
      }
      val = val.trim();
      if (val.length === 0) {
        return self._setAllDirections(declarations, append, append, append, append);
      }
      vals = val.split(" ").map(function(val) {
        return val + append;
      });
      if (vals.length === 1) {
        return self._setAllDirections(declarations, vals[0], vals[0], vals[0], vals[0]);
      } else if (vals.length === 2) {
        return self._setAllDirections(declarations, vals[0], vals[1], vals[0], vals[1]);
      } else if (vals.length === 3) {
        return self._setAllDirections(declarations, vals[0], vals[1], vals[2], vals[1]);
      } else if (vals.length === 4) {
        return self._setAllDirections(declarations, vals[0], vals[1], vals[2], vals[3]);
      } else {
        throw Error(`Can't understand value for padding: \`${originalValue}\``);
      }
    }

    static _setAllDirections(declarations, top, right, bottom, left) {
      PaddingTop.setOnto(declarations, 'paddingTop', top);
      PaddingTop.setOnto(declarations, 'paddingRight', right);
      PaddingTop.setOnto(declarations, 'paddingBottom', bottom);
      PaddingTop.setOnto(declarations, 'paddingLeft', left);
    }

  };

  self = Padding;

  return Padding;

}).call(this);
