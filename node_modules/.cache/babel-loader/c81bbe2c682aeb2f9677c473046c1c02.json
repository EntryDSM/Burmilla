{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilterAction, getApplicantsListAction, getApplicantInfoAction, updateApplicantStatusAction, updateApplicantListAction, resetUpdateStatusAction } from '../../data/modules/redux/action/applicant';\nexport const useApplicant = () => {\n  _s();\n\n  const applicantStore = useSelector(state => ({\n    filters: state.applicant.filters,\n    getApplicantsListStatus: state.applicant.getApplicantsListStatus,\n    getApplicantInfoStatus: state.applicant.getApplicantInfoStatus,\n    updateApplicantStatusStatus: state.applicant.updateApplicantStatusStatus,\n    applicantsList: state.applicant.applicantsList,\n    currnetApplicantInfo: state.applicant.currnetApplicantInfo\n  }));\n  const dispatch = useDispatch();\n  const setFilter = useCallback(payload => dispatch(setFilterAction(payload)), [dispatch]);\n  const getApplicantsList = useCallback(payload => dispatch(getApplicantsListAction(payload)), [dispatch]);\n  const getApplicantInfo = useCallback(payload => dispatch(getApplicantInfoAction(payload)), [dispatch]);\n  const updateApplicantStatus = useCallback(payload => dispatch(updateApplicantStatusAction(payload)), [dispatch]);\n  const updateApplicantList = useCallback(payload => dispatch(updateApplicantListAction(payload)), [dispatch]);\n  const resetUpdateStatus = useCallback(() => dispatch(resetUpdateStatusAction()), [dispatch]);\n  return {\n    applicantStore,\n    setFilter,\n    getApplicantsList,\n    getApplicantInfo,\n    updateApplicantStatus,\n    updateApplicantList,\n    resetUpdateStatus\n  };\n};\n\n_s(useApplicant, \"mTGUwD8uMdPl49S+81PzN49LIj4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport default useApplicant;","map":{"version":3,"sources":["C:/Users/rbgus/OneDrive/바탕 화면/entry admin 6.0/burmilla/Burmilla/src/hooks/applicant/useApplicant.ts"],"names":["useCallback","useSelector","useDispatch","setFilterAction","getApplicantsListAction","getApplicantInfoAction","updateApplicantStatusAction","updateApplicantListAction","resetUpdateStatusAction","useApplicant","applicantStore","state","filters","applicant","getApplicantsListStatus","getApplicantInfoStatus","updateApplicantStatusStatus","applicantsList","currnetApplicantInfo","dispatch","setFilter","payload","getApplicantsList","getApplicantInfo","updateApplicantStatus","updateApplicantList","resetUpdateStatus"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SACEC,eADF,EAGEC,uBAHF,EAKEC,sBALF,EAOEC,2BAPF,EASEC,yBATF,EAWEC,uBAXF,QAYO,2CAZP;AAgBA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAMC,cAAc,GAAGT,WAAW,CAAyBU,KAAK,KAAK;AACnEC,IAAAA,OAAO,EAAED,KAAK,CAACE,SAAN,CAAgBD,OAD0C;AAEnEE,IAAAA,uBAAuB,EAAEH,KAAK,CAACE,SAAN,CAAgBC,uBAF0B;AAGnEC,IAAAA,sBAAsB,EAAEJ,KAAK,CAACE,SAAN,CAAgBE,sBAH2B;AAInEC,IAAAA,2BAA2B,EAAEL,KAAK,CAACE,SAAN,CAAgBG,2BAJsB;AAKnEC,IAAAA,cAAc,EAAEN,KAAK,CAACE,SAAN,CAAgBI,cALmC;AAMnEC,IAAAA,oBAAoB,EAAEP,KAAK,CAACE,SAAN,CAAgBK;AAN6B,GAAL,CAA9B,CAAlC;AASA,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AAEA,QAAMkB,SAAS,GAAGpB,WAAW,CAC1BqB,OAAD,IAA+BF,QAAQ,CAAChB,eAAe,CAACkB,OAAD,CAAhB,CADZ,EAE3B,CAACF,QAAD,CAF2B,CAA7B;AAKA,QAAMG,iBAAiB,GAAGtB,WAAW,CAClCqB,OAAD,IACEF,QAAQ,CAACf,uBAAuB,CAACiB,OAAD,CAAxB,CAFyB,EAGnC,CAACF,QAAD,CAHmC,CAArC;AAMA,QAAMI,gBAAgB,GAAGvB,WAAW,CACjCqB,OAAD,IACEF,QAAQ,CAACd,sBAAsB,CAACgB,OAAD,CAAvB,CAFwB,EAGlC,CAACF,QAAD,CAHkC,CAApC;AAMA,QAAMK,qBAAqB,GAAGxB,WAAW,CACtCqB,OAAD,IACEF,QAAQ,CAACb,2BAA2B,CAACe,OAAD,CAA5B,CAF6B,EAGvC,CAACF,QAAD,CAHuC,CAAzC;AAMA,QAAMM,mBAAmB,GAAGzB,WAAW,CACpCqB,OAAD,IACEF,QAAQ,CAACZ,yBAAyB,CAACc,OAAD,CAA1B,CAF2B,EAGrC,CAACF,QAAD,CAHqC,CAAvC;AAMA,QAAMO,iBAAiB,GAAG1B,WAAW,CACnC,MAAMmB,QAAQ,CAACX,uBAAuB,EAAxB,CADqB,EAEnC,CAACW,QAAD,CAFmC,CAArC;AAKA,SAAO;AACLT,IAAAA,cADK;AAELU,IAAAA,SAFK;AAGLE,IAAAA,iBAHK;AAILC,IAAAA,gBAJK;AAKLC,IAAAA,qBALK;AAMLC,IAAAA,mBANK;AAOLC,IAAAA;AAPK,GAAP;AASD,CAvDM;;GAAMjB,Y;UACYR,W,EASNC,W;;;AA+CnB,eAAeO,YAAf","sourcesContent":["import { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  setFilterAction,\r\n  setFilterPayload,\r\n  getApplicantsListAction,\r\n  getApplicantsListPayload,\r\n  getApplicantInfoAction,\r\n  getApplicantInfoPayload,\r\n  updateApplicantStatusAction,\r\n  updateApplicantStatusPayload,\r\n  updateApplicantListAction,\r\n  UpdateApplicantListPayload,\r\n  resetUpdateStatusAction,\r\n} from '../../data/modules/redux/action/applicant';\r\nimport { AppState } from '../../data/modules/store';\r\nimport { InitialState } from '../../data/modules/redux/reducer/applicant';\r\n\r\nexport const useApplicant = () => {\r\n  const applicantStore = useSelector<AppState, InitialState>(state => ({\r\n    filters: state.applicant.filters,\r\n    getApplicantsListStatus: state.applicant.getApplicantsListStatus,\r\n    getApplicantInfoStatus: state.applicant.getApplicantInfoStatus,\r\n    updateApplicantStatusStatus: state.applicant.updateApplicantStatusStatus,\r\n    applicantsList: state.applicant.applicantsList,\r\n    currnetApplicantInfo: state.applicant.currnetApplicantInfo,\r\n  }));\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const setFilter = useCallback(\r\n    (payload: setFilterPayload) => dispatch(setFilterAction(payload)),\r\n    [dispatch],\r\n  );\r\n\r\n  const getApplicantsList = useCallback(\r\n    (payload: getApplicantsListPayload) =>\r\n      dispatch(getApplicantsListAction(payload)),\r\n    [dispatch],\r\n  );\r\n\r\n  const getApplicantInfo = useCallback(\r\n    (payload: getApplicantInfoPayload) =>\r\n      dispatch(getApplicantInfoAction(payload)),\r\n    [dispatch],\r\n  );\r\n\r\n  const updateApplicantStatus = useCallback(\r\n    (payload: updateApplicantStatusPayload) =>\r\n      dispatch(updateApplicantStatusAction(payload)),\r\n    [dispatch],\r\n  );\r\n\r\n  const updateApplicantList = useCallback(\r\n    (payload: UpdateApplicantListPayload) =>\r\n      dispatch(updateApplicantListAction(payload)),\r\n    [dispatch],\r\n  );\r\n\r\n  const resetUpdateStatus = useCallback(\r\n    () => dispatch(resetUpdateStatusAction()),\r\n    [dispatch],\r\n  );\r\n\r\n  return {\r\n    applicantStore,\r\n    setFilter,\r\n    getApplicantsList,\r\n    getApplicantInfo,\r\n    updateApplicantStatus,\r\n    updateApplicantList,\r\n    resetUpdateStatus,\r\n  };\r\n};\r\n\r\nexport default useApplicant;\r\n"]},"metadata":{},"sourceType":"module"}